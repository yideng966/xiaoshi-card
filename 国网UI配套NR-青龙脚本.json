[
    {
        "id": "2ded4b31d7f52794",
        "type": "group",
        "z": "7fbec2b85ff97d67",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "59a895876e97b81e",
            "77b6415ab2a626fd",
            "3ec650d791fe056d",
            "3688ad0ecd04a2fc",
            "90b5041ef4369769",
            "2650a8f66f902ec1",
            "8bae7328397d00c2",
            "88e22ea188ca1c56",
            "30734fd320f840d4",
            "13d3c88f2bd8ee98",
            "a25806c5275b4ffc",
            "c2e963927c52c179",
            "28c52c9f107067a9",
            "596c163544f5982a",
            "a582bbc34957de42",
            "38b2322a58357d6c",
            "ec930e1e95506eed"
        ],
        "x": 34,
        "y": 759,
        "w": 852,
        "h": 302
    },
    {
        "id": "59a895876e97b81e",
        "type": "mqtt in",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "青龙mqtt",
        "topic": "nodejs/state-grid/6103518118537",
        "qos": "0",
        "datatype": "json",
        "broker": "c4b88d9af1a406ad",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 840,
        "wires": [
            [
                "90b5041ef4369769"
            ]
        ]
    },
    {
        "id": "77b6415ab2a626fd",
        "type": "ha-sensor",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "国网NR数据",
        "entityConfig": "558b39bd514b1bfd",
        "version": 0,
        "state": "balance",
        "stateType": "msg",
        "attributes": [
            {
                "property": "date",
                "value": "date",
                "valueType": "msg"
            },
            {
                "property": "dayList",
                "value": "dayList",
                "valueType": "msg"
            },
            {
                "property": "monthList",
                "value": "monthList",
                "valueType": "msg"
            },
            {
                "property": "yearList",
                "value": "yearList",
                "valueType": "msg"
            }
        ],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 790,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "3ec650d791fe056d",
        "type": "comment",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "国网青龙脚本：2025-07-03 更新     ",
        "info": "",
        "x": 730,
        "y": 800,
        "wires": []
    },
    {
        "id": "3688ad0ecd04a2fc",
        "type": "comment",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "双击下面修改【青龙mqtt】主题中的户号",
        "info": "",
        "x": 220,
        "y": 800,
        "wires": []
    },
    {
        "id": "90b5041ef4369769",
        "type": "file",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "写入青龙文件",
        "filename": "/homeassistant/.storage/qinglong_state_grid.config",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 300,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "2650a8f66f902ec1",
        "type": "file in",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "读取青龙文件",
        "filename": "/homeassistant/.storage/qinglong_state_grid.config",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 900,
        "wires": [
            [
                "88e22ea188ca1c56"
            ]
        ]
    },
    {
        "id": "8bae7328397d00c2",
        "type": "inject",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "电费-青龙",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "2650a8f66f902ec1"
            ]
        ]
    },
    {
        "id": "88e22ea188ca1c56",
        "type": "json",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 900,
        "wires": [
            [
                "38b2322a58357d6c"
            ]
        ]
    },
    {
        "id": "30734fd320f840d4",
        "type": "function",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "登录青龙",
        "func": "var id = [2];     //通过查看日志管理，如scripts_state_grid_1，下划线后面1就是id\nvar login = {\n  \"client_id\": \"-5ZEsG4f9La8\",  //青龙-系统设置-应用设置-新增应用，即可查看\n  \"client_secret\": \"L96dWgkPMN_fZXb9UEtwUGu_\"\n}\nvar outputMsg = [\n    { \n        payload: login,\n        id:id\n    }\n];\nreturn outputMsg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1020,
        "wires": [
            [
                "13d3c88f2bd8ee98"
            ]
        ]
    },
    {
        "id": "13d3c88f2bd8ee98",
        "type": "http request",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "登录青龙",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "http://192.168.31.208:5700/open/auth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "28c52c9f107067a9"
            ]
        ]
    },
    {
        "id": "a25806c5275b4ffc",
        "type": "http request",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "运行青龙",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "http://192.168.31.208:5700/open/crons/run",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "token"
            }
        ],
        "x": 800,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "c2e963927c52c179",
        "type": "function",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "构造参数",
        "func": "\nvar token = msg.payload.data.token;\n\nreturn  [\n    { \n        payload: msg.id,\n        token: \"Bearer \" + token\n    }\n];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1020,
        "wires": [
            [
                "a25806c5275b4ffc"
            ]
        ]
    },
    {
        "id": "28c52c9f107067a9",
        "type": "json",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 530,
        "y": 1020,
        "wires": [
            [
                "c2e963927c52c179"
            ]
        ]
    },
    {
        "id": "596c163544f5982a",
        "type": "ha-button",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "运行青龙",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "f7e92242e30010ec",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 120,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "a582bbc34957de42",
        "type": "comment",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "HA执行青龙任务：2025-06-10 更新     ",
        "info": "",
        "x": 720,
        "y": 980,
        "wires": []
    },
    {
        "id": "38b2322a58357d6c",
        "type": "function",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "数据结构重构",
        "func": "const dayList_ori = msg.payload.dayList;\nconst dayPrice = msg.payload.totalEleCost / msg.payload.totalEleNum;    //年平均单价\n//重写日结构\nconst dayList7 = dayList_ori.map(item => ({\n    day: item.day,                     //日期\n    dayEleNum: Number(item.dayElePq),  //总电量\n    dayTPq: Number(item.thisTPq),      //尖电量\n    dayPPq: Number(item.thisPPq),      //峰电量\n    dayNPq: Number(item.thisNPq),      //平电量\n    dayVPq: Number(item.thisVPq),      //谷电量\n}));\n\n/*  增加每日电费金额\n*   请根据自己的情况计算每日电费金额\n*/\nconst tierConfig = {\n    tier1: {\n        limit: 2160,\n        prices: {\n            dayTPq: 0.00,   // 尖时段\n            dayPPq: 0.59,   // 峰时段\n            dayNPq: 0.00,   // 平时段\n            dayVPq: 0.44    // 谷时段\n        }\n    },\n    tier2: {\n        limit: 3120,\n        prices: {\n            dayTPq: 0.00,   // 尖时段\n            dayPPq: 0.64,   // 峰时段\n            dayNPq: 0.00, // 平时段\n            dayVPq: 0.49    // 谷时段\n        }\n    },\n    tier3: {\n        prices: {\n            dayTPq: 0.00,   // 尖时段\n            dayPPq: 0.89,   // 峰时段\n            dayNPq: 0.00,   // 平时段\n            dayVPq: 0.74    // 谷时段\n        }\n    }\n};\n// 时段优先级顺序\nconst timeSlotOrder = ['dayTPq', 'dayPPq', 'dayNPq', 'dayVPq'];\nconst dayList = dayList7.map(item => {\n    const date = new Date(item.day);\n    const year = date.getFullYear();\n    const cyclestartDate = new Date(year, 0, 1); // 1月1日\n    // 计算累计用电量\n    const cycleDays = dayList7.filter(d => {\n        const dDate = new Date(d.day);\n        return dDate >= cyclestartDate && dDate <= date;\n    });\n    const cumulativeUsage = cycleDays.reduce((sum, d) => sum + d.dayEleNum, 0);\n    // 计算当日电费\n    let dayEleCost = 0;\n    const usage = item.dayEleNum;\n    let remainingUsage = usage;\n    const usageBeforeToday = cumulativeUsage - usage;\n    // 第一阶梯计算\n    if (usageBeforeToday < tierConfig.tier1.limit) {\n        const tier1Remaining = tierConfig.tier1.limit - usageBeforeToday;\n        const tier1Usage = Math.min(remainingUsage, tier1Remaining);\n        // 按时段优先级计算\n        for (const slot of timeSlotOrder) {\n            if (tier1Usage <= 0) break;\n\n            const slotUsage = Math.min(item[slot], tier1Usage);\n            dayEleCost += slotUsage * tierConfig.tier1.prices[slot];\n            remainingUsage -= slotUsage;\n        }\n    }\n    // 第二阶梯计算\n    if (remainingUsage > 0 && usageBeforeToday < tierConfig.tier2.limit) {\n        const tier2Start = tierConfig.tier1.limit;\n        const tier2Remaining = tierConfig.tier2.limit - Math.max(usageBeforeToday, tier2Start);\n        const tier2Usage = Math.min(remainingUsage, tier2Remaining);\n\n        // 按时段优先级计算\n        for (const slot of timeSlotOrder) {\n            if (tier2Usage <= 0) break;\n\n            const slotUsage = Math.min(item[slot], tier2Usage);\n            dayEleCost += slotUsage * tierConfig.tier2.prices[slot];\n            remainingUsage -= slotUsage;\n        }\n    }\n    // 第三阶梯计算\n    if (remainingUsage > 0) {\n        // 按时段优先级计算\n        for (const slot of timeSlotOrder) {\n            if (remainingUsage <= 0) break;\n\n            const slotUsage = Math.min(item[slot], remainingUsage);\n            dayEleCost += slotUsage * tierConfig.tier3.prices[slot];\n            remainingUsage -= slotUsage;\n        }\n    }\n    return {\n        day: item.day,\n        dayEleNum: item.dayEleNum,\n        dayEleCost: parseFloat(dayEleCost.toFixed(2)), // 保留两位小数\n        dayTPq: item.dayTPq,\n        dayPPq: item.dayPPq,\n        dayNPq: item.dayNPq,\n        dayVPq: item.dayVPq,\n    };\n});\n\n//重写月结构\nconst monthList_ori = msg.payload.monthList.reverse();\nconst monthList = monthList_ori.map(monthItem => {\n    const month = monthItem.month;\n    const yearMonth = month.replace('-', '');\n    const daysInMonth = dayList.filter(dayItem => {\n        const dayYearMonth = dayItem.day.slice(0, 7).replace('-', '');\n        return dayYearMonth === yearMonth;\n    });\n    let monthTPq = 0;\n    let monthPPq = 0;\n    let monthNPq = 0;\n    let monthVPq = 0;\n    daysInMonth.forEach(day => {\n        monthTPq += parseFloat(day.dayTPq) || 0;\n        monthPPq += parseFloat(day.dayPPq) || 0;\n        monthNPq += parseFloat(day.dayNPq) || 0;\n        monthVPq += parseFloat(day.dayVPq) || 0;\n    });\n    return {\n        month: monthItem.month,\n        monthEleNum: Number(monthItem.monthEleNum),\n        monthEleCost: Number(monthItem.monthEleCost),\n        monthTPq: Number(monthTPq.toFixed(2)),\n        monthPPq: Number(monthPPq.toFixed(2)),\n        monthNPq: Number(monthNPq.toFixed(2)),\n        monthVPq: Number(monthVPq.toFixed(2))\n    };\n});\n\n//增加上月，统计日用电\nconst prevMonth = new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().slice(0, 7);\nconst premonthListExists = monthList.some(item => item.month === prevMonth);\nif (!premonthListExists) {\n    const yearMonth = prevMonth.replace('-', '');\n    const daysInCurrentMonth = dayList.filter(dayItem => {\n        const dayYearMonth = dayItem.day.slice(0, 7).replace('-', '');\n        return dayYearMonth === yearMonth;\n    });\n    let monthEleNum = 0;\n    let monthTPq = 0;\n    let monthPPq = 0;\n    let monthNPq = 0;\n    let monthVPq = 0;\n    let monthEleCost = 0; \n    daysInCurrentMonth.forEach(day => {\n        monthEleNum += parseFloat(day.dayEleNum) || 0;\n        monthTPq += parseFloat(day.dayTPq) || 0;\n        monthPPq += parseFloat(day.dayPPq) || 0;\n        monthNPq += parseFloat(day.dayNPq) || 0;\n        monthVPq += parseFloat(day.dayVPq) || 0;\n        monthEleCost += parseFloat(day.dayEleCost) || 0;\n    });\n\n    monthList.unshift({\n        month: prevMonth,\n        monthEleNum: Number(monthEleNum.toFixed(2)),\n        monthEleCost: Number(monthEleCost.toFixed(2)),\n        monthTPq: Number(monthTPq.toFixed(2)),\n        monthPPq: Number(monthPPq.toFixed(2)),\n        monthNPq: Number(monthNPq.toFixed(2)),\n        monthVPq: Number(monthVPq.toFixed(2))\n    });\n}\n\n//增加当月，统计日用电\nconst currentMonth = new Date().toISOString().slice(0, 7);\nconst monthListExists = monthList.some(item => item.month === currentMonth);\nif (!monthListExists) {\n    const yearMonth = currentMonth.replace('-', '');\n    const daysInCurrentMonth = dayList.filter(dayItem => {\n        const dayYearMonth = dayItem.day.slice(0, 7).replace('-', '');\n        return dayYearMonth === yearMonth;\n    });\n    let monthEleNum = 0;\n    let monthTPq = 0;\n    let monthPPq = 0;\n    let monthNPq = 0;\n    let monthVPq = 0;\n    let monthEleCost = 0; \n    daysInCurrentMonth.forEach(day => {\n        monthEleNum += parseFloat(day.dayEleNum) || 0;\n        monthTPq += parseFloat(day.dayTPq) || 0;\n        monthPPq += parseFloat(day.dayPPq) || 0;\n        monthNPq += parseFloat(day.dayNPq) || 0;\n        monthVPq += parseFloat(day.dayVPq) || 0;\n        monthEleCost += parseFloat(day.dayEleCost) || 0;\n    });\n\n    monthList.unshift({\n        month: currentMonth,\n        monthEleNum: Number(monthEleNum.toFixed(2)),\n        monthEleCost: Number(monthEleCost.toFixed(2)),\n        monthTPq: Number(monthTPq.toFixed(2)),\n        monthPPq: Number(monthPPq.toFixed(2)),\n        monthNPq: Number(monthNPq.toFixed(2)),\n        monthVPq: Number(monthVPq.toFixed(2))\n    });\n}\n\n\nconst yearMap = {}; // 用于按年份暂存数据\nmonthList.forEach(monthData => {\n    const year = monthData.month.substring(0, 4);\n    if (!yearMap[year]) {\n        yearMap[year] = {\n            year: year,\n            yearEleNum: 0,\n            yearEleCost: 0,\n            yearTPq: 0,\n            yearPPq: 0,\n            yearNPq: 0,\n            yearVPq: 0\n        };\n    }\n    yearMap[year].yearEleNum += parseFloat(monthData.monthEleNum) || 0;\n    yearMap[year].yearEleCost += parseFloat(monthData.monthEleCost) || 0;\n    yearMap[year].yearTPq += parseFloat(monthData.monthTPq) || 0;\n    yearMap[year].yearPPq += parseFloat(monthData.monthPPq) || 0;\n    yearMap[year].yearNPq += parseFloat(monthData.monthNPq) || 0;\n    yearMap[year].yearVPq += parseFloat(monthData.monthVPq) || 0;\n});\nconst yearList = Object.values(yearMap).map(yearData => ({\n    ...yearData,\n    yearEleNum: Number(yearData.yearEleNum.toFixed(2)),\n    yearEleCost: Number(yearData.yearEleCost.toFixed(2)),\n    yearTPq: Number(yearData.yearTPq.toFixed(2)),\n    yearPPq: Number(yearData.yearPPq.toFixed(2)),\n    yearNPq: Number(yearData.yearNPq.toFixed(2)),\n    yearVPq: Number(yearData.yearVPq.toFixed(2))\n}));\n\nmsg.date = msg.payload.date;\nmsg.balance = Number(msg.payload.sumMoney);\nmsg.dayList = dayList;\nmsg.monthList = monthList;\nmsg.yearList = yearList.reverse();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 900,
        "wires": [
            [
                "77b6415ab2a626fd"
            ]
        ]
    },
    {
        "id": "ec930e1e95506eed",
        "type": "comment",
        "z": "7fbec2b85ff97d67",
        "g": "2ded4b31d7f52794",
        "name": "用AI修改电费话术（双击查看）",
        "info": "现有计费规则是阶梯电费+峰平谷\n将下面第5步修改成自己的国网计费规则后，给ai生成代码后，替换【数据结构重置】内的16到109行内容\n\nconst dayList = dayList7.map(item => ({\n    day: item.day,                     //日期\n    dayEleCost://增加的字段 \n    dayEleNum: Number(item.dayElePq),  //总电量\n    dayTPq: Number(item.thisTPq),      //尖电量\n    dayPPq: Number(item.thisPPq),      //峰电量\n    dayNPq: Number(item.thisNPq),      //平电量\n    dayVPq: Number(item.thisVPq),      //谷电量\n}));\n中文回答，上面是现有的数据结构， \n1、增加一个字段dayEleCost\n2、dayEleCost是计算出当日的电费金额 \n3、dayEleNum是当日用电量 \n4、dayTPq、dayPP、dayNPq、dayVPq是当日的尖、峰、平、谷电量\n4、day是2025-06-14格式的日期 \n5、金额计算规则，每年的1月1日至12月31日是一个周期，\n总用电量第一阶梯是0-2160，2阶梯是2161-4200，3阶梯是4201以上，\n一阶梯尖时段单价是0.9，一阶梯峰时段单价是0.63，一阶梯平时段单价是0.4983，一阶梯谷时段单价是0.48，\n二阶梯尖时段单价是1.05，二阶梯峰时段单价是0.68，二阶梯平时段单价是0.5483，二阶梯谷时段单价是0.53，\n三阶梯尖时段单价是1.35，三阶梯峰时段单价是0.93，三阶梯平时段单价是0.7983，三阶梯谷时段单价是0.78",
        "x": 730,
        "y": 840,
        "wires": []
    },
    {
        "id": "c4b88d9af1a406ad",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt://localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "558b39bd514b1bfd",
        "type": "ha-entity-config",
        "server": "d5d3e351.02443",
        "deviceConfig": "57e9976425d3c91e",
        "name": "state_grid",
        "version": 6,
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "state_grid"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "f7e92242e30010ec",
        "type": "ha-entity-config",
        "server": "d5d3e351.02443",
        "deviceConfig": "",
        "name": "qinglong",
        "version": 6,
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": "qinglong"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "d5d3e351.02443",
        "type": "server",
        "name": "消逝Home Assistant",
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ":",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "default",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": false
    },
    {
        "id": "57e9976425d3c91e",
        "type": "ha-device-config",
        "name": "国家电网",
        "hwVersion": "",
        "manufacturer": "Node-RED",
        "model": "",
        "swVersion": ""
    }
]
